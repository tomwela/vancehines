<?phpnamespace ClickBlocks\DB;use ClickBlocks\Core,    ClickBlocks\IO,    ClickBlocks\Exceptions;/** * A class that implements the model by which the relationship between objects of classes and RDBMS * Класс, реализующий модель, с помощью которой происходит связь между объектами классов и РСУБД */class ORM implements \IteratorAggregate{   const CACHE_DB_INFO_KEY = '__ORM_DB_INFO__';   private $dbs = array();   private $config = null;   private $cache = null;   private $info = null;   private static $instance = null;   /**    * class constructor    * конструктор класса    *     * @access private     */   private function __construct()   {      $this->config = Core\Register::getInstance()->config;      $this->cache = Core\Register::getInstance()->cache;   }   /**    * clones the object    * Клонирует объект    *    * @access private     */   private function __clone(){}   /**    * If an object is created - will return it, otherwise create a new    * Если объект создан - вернет его, иначе создаст новый    *    * @return type    * @access public    * @static     */   public static function getInstance()   {      if (self::$instance === null) self::$instance = new self();      return self::$instance;   }   /**    *     *     *    * @return \ClickBlocks\Core\BaseIterator     * @access public    */   public function getIterator()   {      return new Core\BaseIterator($this->dbs);   }   /**    *     *     *    * @param type $alias    * @return \ClickBlocks\DB\ORM     * @access public    */   public function removeDB($alias)   {      unset($this->dbs[$alias]);      return $this;   }      public function addAllDB()   {     foreach ($this->getDBAliases() as $alias) $this->addDB($alias);   }   /**    *     *     *    * @param type $alias    * @return \ClickBlocks\DB\ORM     * @access public    */   public function addDB($alias)   {      $db = new DB();      $db->connect($this->config[$alias]['dsn'], $this->config[$alias]['dbuser'], $this->config[$alias]['dbpass']);      $this->dbs[$alias] = $db;      return $this;   }   /**    *     *     *    * @param type $alias    * @return type     * @access public    */   public function getDB($alias)   {      if (!($this->dbs[$alias] instanceof IDB)) $this->addDB($alias);      return $this->dbs[$alias];   }   /**    * Returns the list of all databases.     *    * @return array     * @access public    */   public function getDBList()   {      return $this->dbs;   }      /**    * Returns the list of all database aliases.     *    * @return array     * @access public    */   public function getDBAliases()   {     $tmp = array();     foreach ($this->config as $alias => $value)     {       if (is_array($value) && isset($value['dsn'])) $tmp[] = $alias;     }     return $tmp;   }   /**    *     *     *    * @return type     * @access public    */   public function getORMInfo()   {      if (!$this->info)      {         $this->info = $this->cache->get($this->config->siteUniqueID . self::CACHE_DB_INFO_KEY);         if (!$this->info)         {            $this->info = foo(new ORMParser())->parseXML();            $this->cache->set($this->config->siteUniqueID . self::CACHE_DB_INFO_KEY, $this->info, $this->config->cacheORMInfoExpire);         }      }      return $this->info;   }   /**    *     *     *    * @return \ClickBlocks\DB\ORMInfo     * @access public    */   public function getORMInfoObject()   {      return new ORMInfo($this->getORMInfo());   }   /**    *     *     *    * @param string $namespace    * @param string $xmlfile    * @return \ClickBlocks\DB\ORM     * @access public    */   public function generateXML($namespace = 'ClickBlocks\\DB', $xmlfile = null)   {      $gen = new ORMGenerator();      $gen->generateXML($namespace, $xmlfile);      $this->cache->delete($this->config->siteUniqueID . self::CACHE_DB_INFO_KEY);      return $this;   }   /**    *     *     *    * @param type $mode    * @param string $xmlfile    * @return \ClickBlocks\DB\ORM     * @access public    */   public function synchronize($mode = null, $xmlfile = null)   {      $sync = new ORMSynchronizer();      $sync->synchronize($mode, $xmlfile);      return $this;   }   /**    *     *     *    * @param string $xmlfile    * @return \ClickBlocks\DB\ORM     * @access public    */   public function generateClasses($xmlfile = null)   {      $parser = new ORMParser();      $this->info = $parser->parseXML($xmlfile);      $this->cache->set($this->config->siteUniqueID . self::CACHE_DB_INFO_KEY, $this->info, $this->config->cacheORMInfoExpire);      $gen = new ORMGenerator();      $gen->generateFiles();      return $this;   }      public static function cleanCache()   {      $reg = Core\Register::getInstance();      $reg->cache->delete($reg->config->siteUniqueID . self::CACHE_DB_INFO_KEY);   }}?>